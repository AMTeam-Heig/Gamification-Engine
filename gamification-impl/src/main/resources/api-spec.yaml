openapi: '3.0.3'
info:
  version: '0.1.0'
  title: Gamification API
  description: An API to add a gamification process to a simple site with Swagger and Spring Boot
security:
  #  - bearerAuth: []
  - apiKeyAuth: []
paths:
  #APPLICATION REGISTRATION
  /application:
    parameters:
      - $ref: '#/components/securitySchemes/apiKeyAuth'
    post:
      description: create a new application
      operationId: newApplication
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Application correctly created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Application'

  # LOGIN
  /login:
    post:
      description: log with credentials
      operationId: login
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '201':
          description: Login Successful
        '401':
          description: Wrong user credentials
  # USERS
  /users:
    post:
      description: create a user
      operationId: register
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: user created
        '401':
          description: request error
        '403':
          description: username already taken
  /users/{username}:
    parameters:
      - in: path
        name: username
        required: true
        schema:
          $ref: '#/components/schemas/Username'
    get:
      description: get user informations
      operationId: getUserByUsername
      responses:
        '201':
          description: user informations
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: username does not exist
    put:
      description: change user password
      operationId: changePassword
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewPassword'
      responses:
        '201':
          description: changed password successfully
        '401':
          description: Operation failed
  # EVENTS
  /events:
    post:
      description: create a event
      operationId: createEvent
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: created
    get:
      description: get the list of all events
      operationId: getEvents
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /events/{id}:
    get:
      description: get one event, by id
      operationId: getEvent
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Event'
  # BADGES
  /badges:
    post:
      description: create a badge
      operationId: createBadge
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '201':
          description: created
    get:
      description: get the list of all badges
      operationId: getBadges
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
  /badges/{id}:
    get:
      description: get one badge, by id
      operationId: getBadge
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Badge'

components:
  securitySchemes:
    #    bearerAuth:            # arbitrary name for the security scheme
    #      type: http
    #      scheme: bearer       # warning: it HAS TO be a lowercase b for the swagger ui version used in springfox
    #      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
    apiKeyAuth:
      type: apiKey
      in: header
      name: apiKey
  parameters:
    Apikey:
      description: "Application api key"
      name: "apiKey"
      in: header
      required: true
      schema:
        type: string
  responses:
    UnauthorizedError:
      description: Api key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  schemas:
    # APPLICATIONS
    Application:
      type: object
      properties:
        apiKey:
          type: string
        name:
          type: string
    # EVENTS
    Event:
      type: object
      properties:
        id:
          type: integer
          nullable: false
    # BADGES
    Badge:
      type: object
      properties:
        level:
          type: string
        description:
          type: string
        obtainedOnDate:
          type: string
          format: date
          nullable: false
    # USERS
    User:
      type: object
      properties:
        username:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
        password:
          type: string
        reputation:
          type: string
    UserCredentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Username:
      type: object
      properties:
        username:
          type: string
    NewPassword:
      type: object
      properties:
        newpassword:
          type: string