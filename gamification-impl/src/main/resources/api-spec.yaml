# ----------------------------------------------------------------------------
# sources :
# https://swagger.io/docs/specification/authentication/api-keys/
# https://swagger.io/docs/specification/describing-responses/
# ----------------------------------------------------------------------------

openapi: '3.0.3'
info:
  version: '0.1.0'
  title: Gamification API
  description: An API to add a gamification process to a simple site with Swagger and Spring Boot
security:
  #  - bearerAuth: []
  - apiKeyAuth: []
paths:
  /applications:
    post:
      description: create a new application
      operationId: newApplication
      requestBody:
        content:
          'application/json':
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: New application created
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Application'
    get:
      description: get the list of all app by apikey
      operationId: getApplications
      parameters:
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFound"
  /badges:
    post:
      description: create a badge
      operationId: createBadge
      parameters:
        - $ref: '#/components/parameters/ApiKey'
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Badge'
      responses:
        '201':
          description: Badge created with success
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFound"
    get:
      description: get the list of all badges of the app
      operationId: getBadges
      parameters:
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Badge'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFound"
  /badges/{id}:
    get:
      description: get one badge, by id
      operationId: getBadge
      parameters:
        - $ref: '#/components/parameters/ApiKey'
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Badge'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFound"

  /users:
    post:
      description: create a user
      operationId: createUser
      parameters:
        - $ref: '#/components/parameters/ApiKey'
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created with success
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFound"
    get:
      description: get the list of all users of the app
      operationId: getUsers
      parameters:
        - $ref: '#/components/parameters/ApiKey'
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFound"

  /users/{id}:
    get:
      description: get one user, by id
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/ApiKey'
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: success
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          $ref: "#/components/responses/NotFound"

components:
  securitySchemes:
    #  bearerAuth:         # arbitrary name for the security scheme
    #  type: http
    #  scheme: bearer      # warning: it HAS TO be a lowercase b for the swagger ui version used in springfox
    #  bearerFormat: JWT   # optional, arbitrary value for documentation purposes
    apiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  parameters:
    ApiKey:
      description: "Application api key"
      name: "X-API-KEY"
      in: header
      required: true
      schema:
        type: string
  responses:
    NotFound:
      description: The specified resource was not found
      headers:
        WWW_Authenticate:
          schema:
            type: string
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
  schemas:
    #APPLICATION
    Application:
      type: object
      properties:
        apiKey:
          type: string
        name:
          type: string
    #BADGE
    Badge:
      type: object
      properties:
        id:
          type: integer
        level:
          type: string
        name:
          type: string
        description:
          type: string
        ObtainedOnDate:
          type: string
          format: date
    #USER
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        birthdate:
          type: string
          format: date
        reputation:
          type: string
        points:
          type: integer

